LangGraph CodeGen v0.1.33
Using graph file: react_agent/react_agent.txt

Welcome to the LangGraph Design REPL!
Working with graph: react_agent

Experimental REPL Mode
Available commands: graph, nodes, conditions, state, code, dsl
Commands can be used with or without dashes (e.g. 'graph', '-graph', or '--graph')
Type 'quit' to exit

lgcodegen: 

# GENERATED code, creates compiled graph: react_agent                                                        
from langgraph.graph import START, END, StateGraph                                                           
from langgraph.checkpoint.memory import MemorySaver                                                          
import sqlite3                                                                                               
                                                                                                             
checkpoint_saver = MemorySaver()                                                                             
react_agent = StateGraph(State)                                                                              
react_agent.add_node('call_model', call_model)                                                               
react_agent.add_node('tool_node', tool_node)                                                                 
react_agent.add_edge(START, 'call_model')                                                                    
def after_call_model(state: State):                                                                          
    if should_call_tool(state):                                                                              
        return 'tool_node'                                                                                   
    return END                                                                                               
                                                                                                             
call_model_conditional_edges = { 'tool_node': 'tool_node', END: END }                                        
react_agent.add_conditional_edges( 'call_model', after_call_model, call_model_conditional_edges )            
                                                                                                             
react_agent.add_edge('tool_node', 'call_model')                                                              
                                                                                                             
react_agent = react_agent.compile(checkpointer=checkpoint_saver)                                             


lgcodegen: Saved code to react_agent/react_agent_graph.py
lgcodegen: 

                                                                                                             
def call_model(state: default, *, config:Optional[RunnableConfig] = None):                                   
    print(f'NODE: call_model')                                                                               
    return { 'nodes_visited': 'call_model', 'counter': state['counter'] + 1 }                                
                                                                                                             
                                                                                                             
def tool_node(state: default, *, config:Optional[RunnableConfig] = None):                                    
    print(f'NODE: tool_node')                                                                                
    return { 'nodes_visited': 'tool_node', 'counter': state['counter'] + 1 }                                 
                                                                                                             


lgcodegen: Saved code to react_agent/react_agent_nodes.py
lgcodegen: 

# GENERATED CODE -- used for graph simulation mode                                                           
def should_call_tool(state: State) -> bool:                                                                  
    result = random_one_or_zero()                                                                            
    print(f'CONDITION: should_call_tool. Result: {result}')                                                  
    return result                                                                                            
                                                                                                             


lgcodegen: Saved code to react_agent/react_agent_conditions.py
lgcodegen: 

                                                                                                             
# GENERATED CODE: mock graph state                                                                           
from typing import Annotated, TypedDict                                                                      
                                                                                                             
def add_str_to_list(a=None, b=""):                                                                           
    return (a if a is not None else []) + ([b] if not isinstance(b, list) else b)                            
                                                                                                             
class State(TypedDict):                                                                                      
    nodes_visited: Annotated[list[str], add_str_to_list]                                                     
    counter: int                                                                                             
                                                                                                             
def initial_state_State():                                                                                   
    return { 'nodes_visited': [], 'counter': 0 }                                                             
                                                                                                             


lgcodegen: Saved code to react_agent/react_agent_state.py
lgcodegen: 

from typing import Dict, TypedDict, Annotated, Optional                                                      
from langgraph.graph import StateGraph, Graph                                                                
from langchain_core.messages.tool import ToolMessage                                                         
from langchain_core.runnables.config import RunnableConfig                                                   
from operator import itemgetter                                                                              
                                                                                                             
                                                                                                             
                                                                                                             
# GENERATED CODE: mock graph state                                                                           
from typing import Annotated, TypedDict                                                                      
                                                                                                             
def add_str_to_list(a=None, b=""):                                                                           
    return (a if a is not None else []) + ([b] if not isinstance(b, list) else b)                            
                                                                                                             
class State(TypedDict):                                                                                      
    nodes_visited: Annotated[list[str], add_str_to_list]                                                     
    counter: int                                                                                             
                                                                                                             
def initial_state_State():                                                                                   
    return { 'nodes_visited': [], 'counter': 0 }                                                             
                                                                                                             
                                                                                                             
                                                                                                             
def call_model(state: default, *, config:Optional[RunnableConfig] = None):                                   
    print(f'NODE: call_model')                                                                               
    return { 'nodes_visited': 'call_model', 'counter': state['counter'] + 1 }                                
                                                                                                             
                                                                                                             
def tool_node(state: default, *, config:Optional[RunnableConfig] = None):                                    
    print(f'NODE: tool_node')                                                                                
    return { 'nodes_visited': 'tool_node', 'counter': state['counter'] + 1 }                                 
                                                                                                             
                                                                                                             
# GENERATED CODE -- used for graph simulation mode                                                           
def should_call_tool(state: State) -> bool:                                                                  
    result = random_one_or_zero()                                                                            
    print(f'CONDITION: should_call_tool. Result: {result}')                                                  
    return result                                                                                            
                                                                                                             
                                                                                                             
# GENERATED code, creates compiled graph: react_agent                                                        
from langgraph.graph import START, END, StateGraph                                                           
from langgraph.checkpoint.memory import MemorySaver                                                          
import sqlite3                                                                                               
                                                                                                             
checkpoint_saver = MemorySaver()                                                                             
react_agent = StateGraph(State)                                                                              
react_agent.add_node('call_model', call_model)                                                               
react_agent.add_node('tool_node', tool_node)                                                                 
react_agent.add_edge(START, 'call_model')                                                                    
def after_call_model(state: State):                                                                          
    if should_call_tool(state):                                                                              
        return 'tool_node'                                                                                   
    return END                                                                                               
                                                                                                             
call_model_conditional_edges = { 'tool_node': 'tool_node', END: END }                                        
react_agent.add_conditional_edges( 'call_model', after_call_model, call_model_conditional_edges )            
                                                                                                             
react_agent.add_edge('tool_node', 'call_model')                                                              
                                                                                                             
react_agent = react_agent.compile(checkpointer=checkpoint_saver)                                             


lgcodegen: Saved code to react_agent/react_agent_main.py
lgcodegen: 

# Agent with tools                                                                                           
START(State) => call_model                                                                                   
                                                                                                             
call_model                                                                                                   
  should_call_tool => tool_node                                                                              
                                                                                                             
tool_node => call_model                                                                                      


lgcodegen: Saved code to react_agent/react_agent_dsl.txt
lgcodegen: Goodbye!
