LangGraph CodeGen v0.1.47
Using graph file: simple/simple.txt

Welcome to the LangGraph Design REPL!
Working with graph: simple

Experimental REPL Mode
Available commands: graph, nodes, conditions, state, code, dsl
Commands can be used with or without dashes (e.g. 'graph', '-graph', or '--graph')
Type 'quit' to exit

lgcodegen: 

# GENERATED code, creates compiled graph: simple                                                                    
from langgraph.graph import START, END, StateGraph                                                                  
from langgraph.checkpoint.memory import MemorySaver                                                                 
import sqlite3                                                                                                      
                                                                                                                    
checkpoint_saver = MemorySaver()                                                                                    
builder_simple = StateGraph(State)                                                                                  
builder_simple.add_node('process_input', process_input)                                                             
builder_simple.add_node('validate_data', validate_data)                                                             
builder_simple.add_node('transform_data', transform_data)                                                           
builder_simple.add_node('store_result', store_result)                                                               
builder_simple.add_node('handle_error', handle_error)                                                               
builder_simple.add_edge(START, 'process_input')                                                                     
builder_simple.add_edge('process_input', 'validate_data')                                                           
def after_validate_data(state: State):                                                                              
    if is_valid(state):                                                                                             
        return 'transform_data'                                                                                     
    elif is_invalid(state):                                                                                         
        return 'handle_error'                                                                                       
    return 'END'                                                                                                    
                                                                                                                    
validate_data_conditional_edges = { 'transform_data': 'transform_data', 'handle_error': 'handle_error', 'END': END }
builder_simple.add_conditional_edges('validate_data', after_validate_data, validate_data_conditional_edges)         
                                                                                                                    
builder_simple.add_edge('transform_data', 'store_result')                                                           
builder_simple.add_edge('store_result', END)                                                                        
builder_simple.add_edge('handle_error', END)                                                                        
                                                                                                                    
simple = builder_simple.compile(checkpointer=checkpoint_saver)                                                      


lgcodegen: Saved code to simple/simple_graph.py
lgcodegen: 

def handle_error(state: default, *, config:Optional[RunnableConfig] = None):                                        
    print(f'NODE: handle_error')                                                                                    
    return { 'nodes_visited': 'handle_error', 'counter': state['counter'] + 1 }                                     
                                                                                                                    
def process_input(state: default, *, config:Optional[RunnableConfig] = None):                                       
    print(f'NODE: process_input')                                                                                   
    return { 'nodes_visited': 'process_input', 'counter': state['counter'] + 1 }                                    
                                                                                                                    
def store_result(state: default, *, config:Optional[RunnableConfig] = None):                                        
    print(f'NODE: store_result')                                                                                    
    return { 'nodes_visited': 'store_result', 'counter': state['counter'] + 1 }                                     
                                                                                                                    
def transform_data(state: default, *, config:Optional[RunnableConfig] = None):                                      
    print(f'NODE: transform_data')                                                                                  
    return { 'nodes_visited': 'transform_data', 'counter': state['counter'] + 1 }                                   
                                                                                                                    
def validate_data(state: default, *, config:Optional[RunnableConfig] = None):                                       
    print(f'NODE: validate_data')                                                                                   
    return { 'nodes_visited': 'validate_data', 'counter': state['counter'] + 1 }                                    
                                                                                                                    


lgcodegen: Saved code to simple/simple_nodes.py
lgcodegen: 

# GENERATED CODE -- used for graph simulation mode                                                                  
def is_valid(state: State) -> bool:                                                                                 
    result = random_one_or_zero()                                                                                   
    print(f'CONDITION: is_valid. Result: {result}')                                                                 
    return result                                                                                                   
                                                                                                                    
                                                                                                                    
def is_invalid(state: State) -> bool:                                                                               
    result = random_one_or_zero()                                                                                   
    print(f'CONDITION: is_invalid. Result: {result}')                                                               
    return result                                                                                                   
                                                                                                                    


lgcodegen: Saved code to simple/simple_conditions.py
lgcodegen: 

                                                                                                                    
# GENERATED CODE: mock graph state                                                                                  
from typing import Annotated, TypedDict                                                                             
                                                                                                                    
def add_str_to_list(a=None, b=""):                                                                                  
    return (a if a is not None else []) + ([b] if not isinstance(b, list) else b)                                   
                                                                                                                    
def add_int(a, b):                                                                                                  
    if b == 0: return 0                                                                                             
    return b+1 if a==b else b                                                                                       
                                                                                                                    
class State(TypedDict):                                                                                             
    nodes_visited: Annotated[list[str], add_str_to_list]                                                            
    counter: Annotated[int, add_int]                                                                                
                                                                                                                    
def initial_state_State():                                                                                          
    return { 'nodes_visited': [], 'counter': 0 }                                                                    
                                                                                                                    


lgcodegen: Saved code to simple/simple_state.py
lgcodegen: 

from typing import Dict, TypedDict, Annotated, Optional                                                             
from langgraph.graph import StateGraph, Graph                                                                       
from langchain_core.messages.tool import ToolMessage                                                                
from langchain_core.runnables.config import RunnableConfig                                                          
from operator import itemgetter                                                                                     
                                                                                                                    
                                                                                                                    
                                                                                                                    
# GENERATED CODE: mock graph state                                                                                  
from typing import Annotated, TypedDict                                                                             
                                                                                                                    
def add_str_to_list(a=None, b=""):                                                                                  
    return (a if a is not None else []) + ([b] if not isinstance(b, list) else b)                                   
                                                                                                                    
def add_int(a, b):                                                                                                  
    if b == 0: return 0                                                                                             
    return b+1 if a==b else b                                                                                       
                                                                                                                    
class State(TypedDict):                                                                                             
    nodes_visited: Annotated[list[str], add_str_to_list]                                                            
    counter: Annotated[int, add_int]                                                                                
                                                                                                                    
def initial_state_State():                                                                                          
    return { 'nodes_visited': [], 'counter': 0 }                                                                    
                                                                                                                    
                                                                                                                    
def handle_error(state: default, *, config:Optional[RunnableConfig] = None):                                        
    print(f'NODE: handle_error')                                                                                    
    return { 'nodes_visited': 'handle_error', 'counter': state['counter'] + 1 }                                     
                                                                                                                    
def process_input(state: default, *, config:Optional[RunnableConfig] = None):                                       
    print(f'NODE: process_input')                                                                                   
    return { 'nodes_visited': 'process_input', 'counter': state['counter'] + 1 }                                    
                                                                                                                    
def store_result(state: default, *, config:Optional[RunnableConfig] = None):                                        
    print(f'NODE: store_result')                                                                                    
    return { 'nodes_visited': 'store_result', 'counter': state['counter'] + 1 }                                     
                                                                                                                    
def transform_data(state: default, *, config:Optional[RunnableConfig] = None):                                      
    print(f'NODE: transform_data')                                                                                  
    return { 'nodes_visited': 'transform_data', 'counter': state['counter'] + 1 }                                   
                                                                                                                    
def validate_data(state: default, *, config:Optional[RunnableConfig] = None):                                       
    print(f'NODE: validate_data')                                                                                   
    return { 'nodes_visited': 'validate_data', 'counter': state['counter'] + 1 }                                    
                                                                                                                    
                                                                                                                    
# GENERATED CODE -- used for graph simulation mode                                                                  
def is_valid(state: State) -> bool:                                                                                 
    result = random_one_or_zero()                                                                                   
    print(f'CONDITION: is_valid. Result: {result}')                                                                 
    return result                                                                                                   
                                                                                                                    
                                                                                                                    
def is_invalid(state: State) -> bool:                                                                               
    result = random_one_or_zero()                                                                                   
    print(f'CONDITION: is_invalid. Result: {result}')                                                               
    return result                                                                                                   
                                                                                                                    
                                                                                                                    
# GENERATED code, creates compiled graph: simple                                                                    
from langgraph.graph import START, END, StateGraph                                                                  
from langgraph.checkpoint.memory import MemorySaver                                                                 
import sqlite3                                                                                                      
                                                                                                                    
checkpoint_saver = MemorySaver()                                                                                    
builder_simple = StateGraph(State)                                                                                  
builder_simple.add_node('process_input', process_input)                                                             
builder_simple.add_node('validate_data', validate_data)                                                             
builder_simple.add_node('transform_data', transform_data)                                                           
builder_simple.add_node('store_result', store_result)                                                               
builder_simple.add_node('handle_error', handle_error)                                                               
builder_simple.add_edge(START, 'process_input')                                                                     
builder_simple.add_edge('process_input', 'validate_data')                                                           
def after_validate_data(state: State):                                                                              
    if is_valid(state):                                                                                             
        return 'transform_data'                                                                                     
    elif is_invalid(state):                                                                                         
        return 'handle_error'                                                                                       
    return 'END'                                                                                                    
                                                                                                                    
validate_data_conditional_edges = { 'transform_data': 'transform_data', 'handle_error': 'handle_error', 'END': END }
builder_simple.add_conditional_edges('validate_data', after_validate_data, validate_data_conditional_edges)         
                                                                                                                    
builder_simple.add_edge('transform_data', 'store_result')                                                           
builder_simple.add_edge('store_result', END)                                                                        
builder_simple.add_edge('handle_error', END)                                                                        
                                                                                                                    
simple = builder_simple.compile(checkpointer=checkpoint_saver)                                                      


lgcodegen: Saved code to simple/simple_main.py
lgcodegen: 

START(State) => process_input                                                                                       
                                                                                                                    
process_input => validate_data                                                                                      
                                                                                                                    
validate_data                                                                                                       
  is_valid => transform_data                                                                                        
  is_invalid => handle_error                                                                                        
  => END                                                                                                            
                                                                                                                    
transform_data                                                                                                      
  => store_result                                                                                                   
                                                                                                                    
store_result                                                                                                        
  => END                                                                                                            
                                                                                                                    
handle_error                                                                                                        
  => END                                                                                                            
                                                                                                                    


lgcodegen: Saved code to simple/simple_dsl.txt
lgcodegen: Goodbye!
