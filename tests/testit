#!/bin/bash

# Exit on error
set -e

# Enable command echoing
#set -x

# List of architectures to test
architectures=(
    "multi_agent_collaboration" 
    "plan_and_execute" 
    "rag" 
    "react_agent" 
    "simple" 
    "supervisor"
)

# Clean up previous results
mkdir -p actual_results
rm -f actual_results/*

# Process each architecture
for arch in "${architectures[@]}"; do
    echo "Processing architecture: $arch"
    
    # Clean up previous generation
    rm -rf "$arch"
    
    # Generate code
    lgcodegen "$arch" --code --seed 42
    
    # Run the test
    python "$arch/$arch.py" 12345 > "actual_results/$arch.txt"
    
    # Compare results while ignoring the first line
    python compare_test_runs.py "expected_results/$arch.txt" "actual_results/$arch.txt"

    # Test repl
    cat commands | lgcodegen "$arch" -i > "actual_results/$arch.commands.txt"
    diff -b <(tail -n +2 "expected_results/$arch.commands.txt") <(tail -n +2 "actual_results/$arch.commands.txt")
    
    # Verify required files exist
    required_files=(
        "$arch.py"
        "${arch}_conditions.py"
        "${arch}_graph.py"
        "${arch}_nodes.py"
        "$arch.txt"
        "${arch}_dsl.txt"
        "${arch}_main.py"
        "${arch}_state.py"
    )
    
    echo "Checking required files for $arch..."
    missing_files=0
    for file in "${required_files[@]}"; do
	#echo "$arch/$file"
        if [ ! -f "$arch/$file" ]; then
            echo -e "\033[31mError: Missing required file: $arch/$file\033[0m"
            missing_files=1
        fi
    done
    
    if [ $missing_files -eq 1 ]; then
        echo -e "\033[31mError: Some required files are missing for $arch architecture!\033[0m"
        exit 1
    fi
done

for arch in "${architectures[@]}"; do
    echo "Cleanup architecture: $arch"
    
    # Clean up previous generation
    rm -rf "$arch"
done
